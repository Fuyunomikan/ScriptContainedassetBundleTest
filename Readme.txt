●プロジェクトの中身●
Assets
-Scenes...シーンファイル格納
-Scripts...スクリプトフォルダ
  -DLL...アセンブリ格納（bytes拡張子にしてある）
  -Editor...アセットバンドル作成スクリプト格納
-StreamingAssetsPath
  -AssetBundle...作成したアセットバンドル格納

「SampleScene」で動作の確認ができます。
アセットバンドルの操作に関しては、BundledScriptManager.csに処理が書いてあるので、ここを参照してみてください。


●内容●
アセットバンドルにスクリプトを内包し、オブジェクトにアタッチするテストプロジェクトです。
通常スクリプトやアセンブリの類はアセットバンドルにすることはできないようなのですが、Byteデータにした状態であればバンドルに含めることができるようです。
そのためアセンブリをByteデータとして保存し、アセットバンドルを読み込んだ後にアセンブリに再変換するという処理をしています。


●追加スクリプト用アセットバンドルの作成＆使用手順●
①アセットバンドルの作成
-追加したいスクリプトをDLL形式のアセンブリにする
-アセンブリの拡張子を「.bytes」にしてUnityにインポート
-アセットバンドル化する

②読み込みとアセンブリの復元
-アセットバンドルをロードする
-TextAssetとしてファイルを読み込む
-TextAssetからbyte[]型に変換
-Assembly.Load(byte)でアセンブリとしてロード

③復元したアセンブリの使用
-Assembly.GetTypes()などで内包するクラス情報を取得
-取得したクラスをAddComponent()等に使う


●個人的懸念点●
・iOSでは使用できない
・単体で動くスクリプトの追加なら問題ないが、参照されることを踏まえた場合は事前に抽象化メソッドなどでビルドからも参照できる構造にする必要がある。
・アセットバンドルの作成と復元の手順が少し面倒


●参照したサイト等●
・テラシュールブログ
https://tsubakit1.hateblo.jp/entry/20130725/1374755344















